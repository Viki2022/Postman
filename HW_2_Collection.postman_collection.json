{
	"info": {
		"_postman_id": "ef513155-42ac-42f8-b655-da4e74c43c73",
		"name": "HW_2_Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22809910"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonFormat = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"pm.test(\"Name matches in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Vika\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"pm.test(\"Age matches in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(\"37\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"pm.test(\"Salary matches in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"let requestJson = request.data;\r",
							"\r",
							"//Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"Name in response = name in request\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(requestJson.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"Age in response = age in request\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(requestJson.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"pm.test(\"Salary in response = salary in request\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(+requestJson.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"pm.test(\"Output to console\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    console.log(jsonData.family);\r",
							"});\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year = salary*4\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(+requestJson.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vika",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let requestData = pm.request.toJSON().url.query;\r",
							"\r",
							"//Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"Name in response = name in request\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestData.find(element => element.key === \"name\")[\"value\"]);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"Age in response = age in request\", function () {\r",
							"    pm.expect(responseData.age).to.eql(requestData.find(element => element.key === \"age\")[\"value\"]);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"pm.test(\"Salary in response = salary in request\", function () {\r",
							"    pm.expect(responseData.salary).to.eql(+requestData.find(element => element.key === \"salary\")[\"value\"]);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"    console.log(responseData.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check if the dog has a name\", function () {\r",
							"    pm.expect(JSON.stringify(responseData)).to.include(\"name\");\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check if the dog has an age\", function () {\r",
							"    pm.expect(JSON.stringify(responseData)).to.include(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check if the dog's name = Luky\", function () {\r",
							"    pm.expect(responseData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check if the dog's age = 4\", function () {\r",
							"    pm.expect(responseData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vika&age=37&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vika"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let requestData = pm.request.toJSON().url.query;\r",
							"\r",
							"//Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"Name in response = name in request\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestData.find(element => element.key === \"name\")[\"value\"]);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age in response = age in request\", function () {\r",
							"    pm.expect(responseData.age).to.eql(+requestData.find(element => element.key === \"age\")[\"value\"]);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(requestData[2]);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(responseData.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(responseData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log(responseData.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary из response.\r",
							"console.log(responseData.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Zero element salary = salary in request\", function () {\r",
							"    pm.expect(responseData.salary[0]).to.eql(+requestData.find(element => element.key === \"salary\")[\"value\"]);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"The first element salary = salary*2 in request\", function () {\r",
							"    pm.expect(+responseData.salary[1]).to.eql(requestData.find(element => element.key === \"salary\")[\"value\"]*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"The second element salary = salary*3 in request\", function () {\r",
							"    pm.expect(Number(responseData.salary[2])).to.eql(requestData[2].value*3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name -> Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", requestData[0].value);\r",
							"\r",
							"//Создать в окружении переменную age -> Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", requestData[1].value);\r",
							"\r",
							"//Создать в окружении переменную salary -> Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", requestData[2].value);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for(let i = 0; i < responseData.salary.length; i++) {\r",
							"console.log(responseData.salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vika&age=37&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vika"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let requestData = request.data;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response has start_qa_salary\", function () {\r",
							"   pm.expect(JSON.stringify(responseData)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response has qa_salary_after_6_months\", function () {\r",
							"   pm.expect(JSON.stringify(responseData)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response has qa_salary_after_12_months\", function () {\r",
							"   pm.expect(responseData).to.have.any.keys(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response has qa_salary_after_1.5_year\", function () {\r",
							"   pm.expect(responseData).to.have.any.keys(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response has qa_salary_after_3.5_years\", function () {\r",
							"   pm.expect(responseData).to.have.any.keys(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response has person\", function () {\r",
							"   pm.expect(responseData).to.have.any.keys(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start_qa_salary in response = salary in request\", function () {\r",
							"    pm.expect(responseData.start_qa_salary).to.eql(+requestData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_6_months in response = salary*2 in request\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_6_months).to.eql(+requestData.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_12_months in response = salary*2.7 in request\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_12_months).to.eql(+requestData.salary*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_1.5_year in response = salary*3.3 in request\", function () {\r",
							"    pm.expect(responseData[\"qa_salary_after_1.5_year\"]).to.eql(+requestData.salary*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_3.5_years in response = salary*3.8 in request\", function () {\r",
							"    pm.expect(responseData[\"qa_salary_after_3.5_years\"]).to.eql(+requestData.salary*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"The first element u_name in response = salary in request\", function () {\r",
							"    pm.expect(responseData.person.u_name[1]).to.eql(+requestData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"U_age in response = age in request\", function () {\r",
							"    pm.expect(responseData.person.u_age).to.eql(+requestData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"U_salary_5_years in response = salary*4.2 in request\", function () {\r",
							"    pm.expect(responseData.person.u_salary_5_years).to.eql(+requestData.salary*4.2);\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for(let properties in responseData.person) {\r",
							"console.log(responseData.person[properties]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}